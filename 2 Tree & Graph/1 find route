
class Edge{
	constructor(src, dest){
		this.src = src;
		this.dest = dest;
	}
}

class Graph{
	constructor(){
		this.adjList = new Map();
	}

	Insert(edge){
		const {src, dest} = edge;

		if(this.adjList.has(src)){
			this.adjList.get(src).push(dest)
		}else{
			this.adjList.set(src, [dest])
		}
	}


	print(){
		let keys = this.adjList.keys();
		for(let i of keys){
			console.log(i, "-->", this.adjList.get(i))
		}
	}


	Search(graph, start, end){
		if(start == end){
			return true
		}

		let queue = [];
		let visited = {};
		visited[start] = true
		queue.push(start);

		while(queue.length > 0){
			let element = queue.shift();
			let neighbor = this.adjList.get(element)
			for(let i in neighbor){
				let neigh = neighbor[i];
				if(neigh == end){
					return true
				}else{
					visited[neigh] = true
					queue.push(neigh)
				}
			}
		}

		return false;
	}

}



let obj  = new Graph();
obj.Insert(new Edge('A', 'B'));
obj.Insert(new Edge('C', 'D'));

obj.print();
console.log(obj.Search(obj, 'A', 'D'))
